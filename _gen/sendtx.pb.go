// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sendtx.proto

package _gen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Coin struct {
	Amount int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *Coin) Reset()                    { *m = Coin{} }
func (m *Coin) String() string            { return proto.CompactTextString(m) }
func (*Coin) ProtoMessage()               {}
func (*Coin) Descriptor() ([]byte, []int) { return fileDescriptorSendtx, []int{0} }

func (m *Coin) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Coin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type SendMsg struct {
	Sender    []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient []byte `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    *Coin  `protobuf:"bytes,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *SendMsg) Reset()                    { *m = SendMsg{} }
func (m *SendMsg) String() string            { return proto.CompactTextString(m) }
func (*SendMsg) ProtoMessage()               {}
func (*SendMsg) Descriptor() ([]byte, []int) { return fileDescriptorSendtx, []int{1} }

func (m *SendMsg) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *SendMsg) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *SendMsg) GetAmount() *Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

type IssueMsg struct {
	Recipient []byte `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    *Coin  `protobuf:"bytes,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *IssueMsg) Reset()                    { *m = IssueMsg{} }
func (m *IssueMsg) String() string            { return proto.CompactTextString(m) }
func (*IssueMsg) ProtoMessage()               {}
func (*IssueMsg) Descriptor() ([]byte, []int) { return fileDescriptorSendtx, []int{2} }

func (m *IssueMsg) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *IssueMsg) GetAmount() *Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

type Tx struct {
	Fee *Coin `protobuf:"bytes,1,opt,name=fee" json:"fee,omitempty"`
	// oneof field :)
	//
	// Types that are valid to be assigned to Msg:
	//	*Tx_Send
	//	*Tx_Issue
	Msg isTx_Msg `protobuf_oneof:"Msg"`
	// after all the message options
	Signatures []*Sig `protobuf:"bytes,32,rep,name=signatures" json:"signatures,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptorSendtx, []int{3} }

type isTx_Msg interface {
	isTx_Msg()
}

type Tx_Send struct {
	Send *SendMsg `protobuf:"bytes,2,opt,name=send,oneof"`
}
type Tx_Issue struct {
	Issue *IssueMsg `protobuf:"bytes,3,opt,name=issue,oneof"`
}

func (*Tx_Send) isTx_Msg()  {}
func (*Tx_Issue) isTx_Msg() {}

func (m *Tx) GetMsg() isTx_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Tx) GetFee() *Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *Tx) GetSend() *SendMsg {
	if x, ok := m.GetMsg().(*Tx_Send); ok {
		return x.Send
	}
	return nil
}

func (m *Tx) GetIssue() *IssueMsg {
	if x, ok := m.GetMsg().(*Tx_Issue); ok {
		return x.Issue
	}
	return nil
}

func (m *Tx) GetSignatures() []*Sig {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Tx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Tx_OneofMarshaler, _Tx_OneofUnmarshaler, _Tx_OneofSizer, []interface{}{
		(*Tx_Send)(nil),
		(*Tx_Issue)(nil),
	}
}

func _Tx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Tx)
	// Msg
	switch x := m.Msg.(type) {
	case *Tx_Send:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Send); err != nil {
			return err
		}
	case *Tx_Issue:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Issue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Tx.Msg has unexpected type %T", x)
	}
	return nil
}

func _Tx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Tx)
	switch tag {
	case 2: // Msg.send
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &Tx_Send{msg}
		return true, err
	case 3: // Msg.issue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IssueMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &Tx_Issue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Tx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Tx)
	// Msg
	switch x := m.Msg.(type) {
	case *Tx_Send:
		s := proto.Size(x.Send)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_Issue:
		s := proto.Size(x.Issue)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Sig is a placeholder, we do not parse it...
type Sig struct {
	Unknown []byte `protobuf:"bytes,1,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (m *Sig) Reset()                    { *m = Sig{} }
func (m *Sig) String() string            { return proto.CompactTextString(m) }
func (*Sig) ProtoMessage()               {}
func (*Sig) Descriptor() ([]byte, []int) { return fileDescriptorSendtx, []int{4} }

func (m *Sig) GetUnknown() []byte {
	if m != nil {
		return m.Unknown
	}
	return nil
}

func init() {
	proto.RegisterType((*Coin)(nil), "_gen.Coin")
	proto.RegisterType((*SendMsg)(nil), "_gen.SendMsg")
	proto.RegisterType((*IssueMsg)(nil), "_gen.IssueMsg")
	proto.RegisterType((*Tx)(nil), "_gen.Tx")
	proto.RegisterType((*Sig)(nil), "_gen.Sig")
}

func init() { proto.RegisterFile("sendtx.proto", fileDescriptorSendtx) }

var fileDescriptorSendtx = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0xeb, 0x3a, 0x69, 0xc9, 0x35, 0x30, 0x58, 0x08, 0x65, 0xa8, 0x44, 0x14, 0x24, 0x14,
	0x96, 0x0c, 0x85, 0x5f, 0x00, 0x4b, 0x91, 0xe8, 0xe2, 0xb2, 0xa3, 0xd2, 0x1c, 0x96, 0x85, 0x7a,
	0xae, 0xe2, 0x44, 0xf4, 0xef, 0xf0, 0x4f, 0x91, 0x1d, 0x07, 0xe8, 0xd0, 0xf1, 0xf9, 0xdd, 0x7d,
	0xef, 0x9d, 0x0c, 0xa9, 0x45, 0xaa, 0xdb, 0x43, 0xb5, 0x6f, 0x4c, 0x6b, 0x44, 0xf4, 0xa6, 0x90,
	0x8a, 0x07, 0x88, 0x9e, 0x8c, 0x26, 0x71, 0x05, 0x93, 0xcd, 0xce, 0x74, 0xd4, 0x66, 0x2c, 0x67,
	0x25, 0x97, 0x41, 0x89, 0x4b, 0x88, 0x6b, 0x24, 0xb3, 0xcb, 0xc6, 0x39, 0x2b, 0x13, 0xd9, 0x8b,
	0x62, 0x0b, 0xd3, 0x35, 0x52, 0xbd, 0xb2, 0xca, 0x2d, 0x3a, 0x2c, 0x36, 0x7e, 0x31, 0x95, 0x41,
	0x89, 0x39, 0x24, 0x0d, 0x6e, 0xf5, 0x5e, 0x23, 0xb5, 0x7e, 0x39, 0x95, 0x7f, 0x0f, 0xa2, 0xf8,
	0x8d, 0xe3, 0x39, 0x2b, 0x67, 0x0b, 0xa8, 0x5c, 0x9b, 0xca, 0x55, 0x19, 0xa2, 0x8b, 0x17, 0x38,
	0x7b, 0xb6, 0xb6, 0x43, 0x97, 0x72, 0x44, 0x63, 0xa7, 0x69, 0xe3, 0x93, 0xb4, 0x6f, 0x06, 0xe3,
	0xd7, 0x83, 0x98, 0x03, 0xff, 0x40, 0xf4, 0x88, 0xe3, 0x39, 0xf7, 0x2c, 0x6e, 0x20, 0x72, 0xf5,
	0x03, 0xe6, 0xbc, 0xb7, 0xc3, 0xa5, 0xcb, 0x91, 0xf4, 0xa6, 0xb8, 0x85, 0x58, 0xbb, 0x5e, 0xa1,
	0xfa, 0x45, 0x3f, 0x35, 0x54, 0x5d, 0x8e, 0x64, 0x6f, 0x8b, 0x3b, 0x00, 0xab, 0x15, 0x6d, 0xda,
	0xae, 0x41, 0x9b, 0xe5, 0x39, 0x2f, 0x67, 0x8b, 0x24, 0x20, 0xb5, 0x92, 0xff, 0xcc, 0xc7, 0x18,
	0xf8, 0xca, 0xaa, 0xe2, 0x1a, 0xf8, 0x5a, 0x2b, 0x91, 0xc1, 0xb4, 0xa3, 0x4f, 0x32, 0x5f, 0x14,
	0x4e, 0x1d, 0xe4, 0xfb, 0xc4, 0x7f, 0xdd, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xff,
	0xdb, 0x12, 0xca, 0x01, 0x00, 0x00,
}
